Data Model,Relationship, Parent-Child

Elasticsearch maintains a map of which parents are associated with which children. 
It is thanks to this map that query-time joins are fast, but it does place a limitation on the parent-child relationship: 

the parent document and all of its children must live on the same shard !!!


PUT /company/employee/1?parent=london 
{
  "name":  "Alice Smith",
  "dob":   "1970-10-24",
  "hobby": "hiking"
}

This parent ID serves two purposes: it creates the link between the parent and the child, 
and it ensures that the child document is stored on the same shard as the parent.

Elasticsearch default to use the _id of the document, to decide which shard a document should belong to. 
The routing value is plugged into this simple formula:

shard = hash(routing) % number_of_primary_shards

However, if a parent ID is specified, it is used as the routing value instead of the _id. In other words, 
both the parent and the child use the same routing value—​the _id of the parent—​and so they are both stored on the same shard.

The parent ID needs to be specified on all single-document requests: when retrieving a child document with a GET request, or when indexing, updating, or deleting a child document. Unlike a search request, which is forwarded to all shards in an index, these single-document requests are forwarded only to the shard that holds the document—​if the parent ID is not specified, the request will probably be forwarded to the wrong shard.

The parent ID should also be specified when using the bulk API:

POST /company/employee/_bulk
{ "index": { "_id": 2, "parent": "london" }}
{ "name": "Mark Thomas", "dob": "1982-05-16", "hobby": "diving" }
{ "index": { "_id": 3, "parent": "liverpool" }}
{ "name": "Barry Smith", "dob": "1979-04-01", "hobby": "hiking" }
{ "index": { "_id": 4, "parent": "paris" }}
{ "name": "Adrien Grand", "dob": "1987-05-11", "hobby": "horses" }

!!! If you update child, make sure to DELETE and then Re-CREATE, because the new parent could be in different shard.


Practical Considerations
Parent-child joins can be a useful technique for managing relationships when index-time performance is more important than search-time performance, but it comes at a significant cost. Parent-child queries can be 5 to 10 times slower than the equivalent nested query!

Use parent-child relationships sparingly, and only when there are many more children than parents.