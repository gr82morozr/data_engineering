# Configure the cluster to reflect a hot/warm architecture, with 
#    `node1` as the only hot node
# Configure the `hamlet-1` index to allocate its shards only to warm 
#    nodes
# Verify the success of the last action by using the _cat API \
# Remove the hot/warm shard filtering configuration from the 
#    `hamlet-1` configuration
# Let's assume that the nodes have either a "large" or "small" local 
#    storage. Add the attribute `storage` to the nodes config, and 
#    set its value so that `node2` is the only with a "small"
#    storage
# Configure the `hamlet-2` index to allocate its shards only to 
#   nodes with a large storage size
# Verify the success of the last action by using the _cat API














# Configure `node-1` to support a shared file system repository for 
#    backups located in
#    (i)  "[home_folder]/repo" and
#    (ii) "[home_folder]/elastic/repo" - e.g., "glc/elastic/repo"
# Create the `hamlet_backup` shared file system repository in 
#    "[home_folder]/elastic/repo" 
# Create a snapshot of the `hamlet` index, so that the snapshot
#    (i)  is named `hamlet_snapshot_1`,
#    (ii) is stored into `hamlet_backup` 
# Delete the index `hamlet`
# Restore the index `hamlet` using `hamlet_snapshot_1`













# Enable cross cluster search on `eoc-06-adaptation-cluster`, so 
#    that
#    (i)   the name of the remote cluster is `original`,
#    (ii)  the seed is `node-1`, which is listening on the default 
#          transport port,
#    (iii) the cross cluster configuration persists across multiple 
#          restarts 
# Run the cross-cluster query below to check your setup 
  
GET /original:hamlet,hamlet-pirate/_search
{
  "query": {
    "match": {
       "speaker": "BERNARDO"
    }
  }
}